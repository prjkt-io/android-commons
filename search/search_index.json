{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prjkt\u2019s Android Commons \u00b6 allprojects { repositories { maven { url 'https://jitpack.io' } } } dependencies { // Build tools (AAPT and Zipalign) implementation 'com.github.prjkt-io.android-commons:buildtools:[latest_version]' // Shell utils implementation 'com.github.prjkt-io.android-commons:shell:[latest_version]' // Theme app backend implementation 'com.github.prjkt-io.android-commons:theme:[latest_version]' }","title":"prjkt's Android Commons"},{"location":"#prjkts-android-commons","text":"allprojects { repositories { maven { url 'https://jitpack.io' } } } dependencies { // Build tools (AAPT and Zipalign) implementation 'com.github.prjkt-io.android-commons:buildtools:[latest_version]' // Shell utils implementation 'com.github.prjkt-io.android-commons:shell:[latest_version]' // Theme app backend implementation 'com.github.prjkt-io.android-commons:theme:[latest_version]' }","title":"prjkt's Android Commons"},{"location":"buildtools/","text":"buildtools Packages \u00b6 Name Summary projekt.commons.buildtools Index \u00b6 All Types","title":"Home"},{"location":"buildtools/#packages","text":"Name Summary projekt.commons.buildtools","title":"Packages"},{"location":"buildtools/#index","text":"All Types","title":"Index"},{"location":"buildtools/alltypes/","text":"All Types \u00b6 Name Summary projekt.commons.buildtools.BuildTools Main class for build tools setup","title":"Home"},{"location":"buildtools/alltypes/#all-types","text":"Name Summary projekt.commons.buildtools.BuildTools Main class for build tools setup","title":"All Types"},{"location":"buildtools/projekt.commons.buildtools/","text":"buildtools / projekt.commons.buildtools Package projekt.commons.buildtools \u00b6 Types \u00b6 Name Summary BuildTools object BuildTools Main class for build tools setup","title":"Home"},{"location":"buildtools/projekt.commons.buildtools/#package-projektcommonsbuildtools","text":"","title":"Package projekt.commons.buildtools"},{"location":"buildtools/projekt.commons.buildtools/#types","text":"Name Summary BuildTools object BuildTools Main class for build tools setup","title":"Types"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/","text":"buildtools / projekt.commons.buildtools / BuildTools BuildTools \u00b6 object BuildTools Main class for build tools setup Functions \u00b6 Name Summary getAapt fun getAapt(context: Context ): File Returns AAPT object in form of File getZipalign fun getZipalign(context: Context ): File Returns Zipalign object in form of File setup fun setup(context: Context , arm: Boolean , arm64: Boolean ): Boolean Extracts AAPT and Zipalign binaries and updates them if needed","title":"Home"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/#buildtools","text":"object BuildTools Main class for build tools setup","title":"BuildTools"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/#functions","text":"Name Summary getAapt fun getAapt(context: Context ): File Returns AAPT object in form of File getZipalign fun getZipalign(context: Context ): File Returns Zipalign object in form of File setup fun setup(context: Context , arm: Boolean , arm64: Boolean ): Boolean Extracts AAPT and Zipalign binaries and updates them if needed","title":"Functions"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/get-aapt/","text":"buildtools / projekt.commons.buildtools / BuildTools / getAapt getAapt \u00b6 fun getAapt(context: Context ): File Returns AAPT object in form of File","title":"Get aapt"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/get-aapt/#getaapt","text":"fun getAapt(context: Context ): File Returns AAPT object in form of File","title":"getAapt"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/get-zipalign/","text":"buildtools / projekt.commons.buildtools / BuildTools / getZipalign getZipalign \u00b6 fun getZipalign(context: Context ): File Returns Zipalign object in form of File","title":"Get zipalign"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/get-zipalign/#getzipalign","text":"fun getZipalign(context: Context ): File Returns Zipalign object in form of File","title":"getZipalign"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/setup/","text":"buildtools / projekt.commons.buildtools / BuildTools / setup setup \u00b6 fun setup(context: Context , arm: Boolean , arm64: Boolean ): Boolean Extracts AAPT and Zipalign binaries and updates them if needed Parameters \u00b6 context - Context arm - Set true if you want to support arm architecture arm64 - Set true if you want to support arm64 architecture Return true if host architecture is supported and binary setup is succeeded","title":"Setup"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/setup/#setup","text":"fun setup(context: Context , arm: Boolean , arm64: Boolean ): Boolean Extracts AAPT and Zipalign binaries and updates them if needed","title":"setup"},{"location":"buildtools/projekt.commons.buildtools/-build-tools/setup/#parameters","text":"context - Context arm - Set true if you want to support arm architecture arm64 - Set true if you want to support arm64 architecture Return true if host architecture is supported and binary setup is succeeded","title":"Parameters"},{"location":"shell/","text":"shell Packages \u00b6 Name Summary projekt.commons.shell Index \u00b6 All Types","title":"Home"},{"location":"shell/#packages","text":"Name Summary projekt.commons.shell","title":"Packages"},{"location":"shell/#index","text":"All Types","title":"Index"},{"location":"shell/alltypes/","text":"All Types \u00b6 Name Summary projekt.commons.shell.Shell Main class for shell helpers, by default non-root shell will be initialized.","title":"Home"},{"location":"shell/alltypes/#all-types","text":"Name Summary projekt.commons.shell.Shell Main class for shell helpers, by default non-root shell will be initialized.","title":"All Types"},{"location":"shell/projekt.commons.shell/","text":"shell / projekt.commons.shell Package projekt.commons.shell \u00b6 Types \u00b6 Name Summary Shell object Shell Main class for shell helpers, by default non-root shell will be initialized.","title":"Home"},{"location":"shell/projekt.commons.shell/#package-projektcommonsshell","text":"","title":"Package projekt.commons.shell"},{"location":"shell/projekt.commons.shell/#types","text":"Name Summary Shell object Shell Main class for shell helpers, by default non-root shell will be initialized.","title":"Types"},{"location":"shell/projekt.commons.shell/-shell/","text":"shell / projekt.commons.shell / Shell Shell \u00b6 object Shell Main class for shell helpers, by default non-root shell will be initialized. Types \u00b6 Name Summary Result data class Result The result of executed command Functions \u00b6 Name Summary exec fun exec(command: String ): Shell.Result fun exec(commands: Array < String >): Shell.Result Executes command with initialized shell process reinitWithRoot fun reinitWithRoot(): Unit Reinitialize shell process with root access rootAccess fun rootAccess(): Boolean Check if root access is available","title":"Home"},{"location":"shell/projekt.commons.shell/-shell/#shell","text":"object Shell Main class for shell helpers, by default non-root shell will be initialized.","title":"Shell"},{"location":"shell/projekt.commons.shell/-shell/#types","text":"Name Summary Result data class Result The result of executed command","title":"Types"},{"location":"shell/projekt.commons.shell/-shell/#functions","text":"Name Summary exec fun exec(command: String ): Shell.Result fun exec(commands: Array < String >): Shell.Result Executes command with initialized shell process reinitWithRoot fun reinitWithRoot(): Unit Reinitialize shell process with root access rootAccess fun rootAccess(): Boolean Check if root access is available","title":"Functions"},{"location":"shell/projekt.commons.shell/-shell/exec/","text":"shell / projekt.commons.shell / Shell / exec exec \u00b6 fun exec(command: String ): Shell.Result Executes command with initialized shell process Parameters \u00b6 command - the command to be executed Return Result of command @Synchronized fun exec(commands: Array < String >): Shell.Result Executes command with initialized shell process Parameters \u00b6 commands - array of commands to be executed in sequence Return Result of commands","title":"Exec"},{"location":"shell/projekt.commons.shell/-shell/exec/#exec","text":"fun exec(command: String ): Shell.Result Executes command with initialized shell process","title":"exec"},{"location":"shell/projekt.commons.shell/-shell/exec/#parameters","text":"command - the command to be executed Return Result of command @Synchronized fun exec(commands: Array < String >): Shell.Result Executes command with initialized shell process","title":"Parameters"},{"location":"shell/projekt.commons.shell/-shell/exec/#parameters_1","text":"commands - array of commands to be executed in sequence Return Result of commands","title":"Parameters"},{"location":"shell/projekt.commons.shell/-shell/reinit-with-root/","text":"shell / projekt.commons.shell / Shell / reinitWithRoot reinitWithRoot \u00b6 fun reinitWithRoot(): Unit Reinitialize shell process with root access","title":"Reinit with root"},{"location":"shell/projekt.commons.shell/-shell/reinit-with-root/#reinitwithroot","text":"fun reinitWithRoot(): Unit Reinitialize shell process with root access","title":"reinitWithRoot"},{"location":"shell/projekt.commons.shell/-shell/root-access/","text":"shell / projekt.commons.shell / Shell / rootAccess rootAccess \u00b6 fun rootAccess(): Boolean Check if root access is available Return true if root access is available","title":"Root access"},{"location":"shell/projekt.commons.shell/-shell/root-access/#rootaccess","text":"fun rootAccess(): Boolean Check if root access is available Return true if root access is available","title":"rootAccess"},{"location":"shell/projekt.commons.shell/-shell/-result/","text":"shell / projekt.commons.shell / Shell / Result Result \u00b6 data class Result The result of executed command Parameters \u00b6 output - Output of executed command Constructors \u00b6 Name Summary <init> Result(output: ArrayList < String >) The result of executed command Properties \u00b6 Name Summary output val output: ArrayList < String > Output of executed command","title":"Home"},{"location":"shell/projekt.commons.shell/-shell/-result/#result","text":"data class Result The result of executed command","title":"Result"},{"location":"shell/projekt.commons.shell/-shell/-result/#parameters","text":"output - Output of executed command","title":"Parameters"},{"location":"shell/projekt.commons.shell/-shell/-result/#constructors","text":"Name Summary <init> Result(output: ArrayList < String >) The result of executed command","title":"Constructors"},{"location":"shell/projekt.commons.shell/-shell/-result/#properties","text":"Name Summary output val output: ArrayList < String > Output of executed command","title":"Properties"},{"location":"shell/projekt.commons.shell/-shell/-result/-init-/","text":"shell / projekt.commons.shell / Shell / Result / <init> <init> \u00b6 Result(output: ArrayList < String >) The result of executed command Parameters \u00b6 output - Output of executed command","title":" init "},{"location":"shell/projekt.commons.shell/-shell/-result/-init-/#init","text":"Result(output: ArrayList < String >) The result of executed command","title":"&lt;init&gt;"},{"location":"shell/projekt.commons.shell/-shell/-result/-init-/#parameters","text":"output - Output of executed command","title":"Parameters"},{"location":"shell/projekt.commons.shell/-shell/-result/output/","text":"shell / projekt.commons.shell / Shell / Result / output output \u00b6 val output: ArrayList < String > Output of executed command","title":"Output"},{"location":"shell/projekt.commons.shell/-shell/-result/output/#output","text":"val output: ArrayList < String > Output of executed command","title":"output"},{"location":"theme/","text":"theme Packages \u00b6 Name Summary projekt.commons.theme projekt.commons.theme.backend Index \u00b6 All Types","title":"Home"},{"location":"theme/#packages","text":"Name Summary projekt.commons.theme projekt.commons.theme.backend","title":"Packages"},{"location":"theme/#index","text":"All Types","title":"Index"},{"location":"theme/alltypes/","text":"All Types \u00b6 Name Summary projekt.commons.theme.backend.Backend Interface to do overlay related operations. projekt.commons.theme.OverlayBuilder A class for building overlays. projekt.commons.theme.OverlayPackageInfo A data class of an overlay package. projekt.commons.theme.ThemeApp Main class of this library. projekt.commons.theme.ThemeApplication Base Application class for theme app. projekt.commons.theme.ThemeAppOptions Class to represent the options for theme app configurations.","title":"Home"},{"location":"theme/alltypes/#all-types","text":"Name Summary projekt.commons.theme.backend.Backend Interface to do overlay related operations. projekt.commons.theme.OverlayBuilder A class for building overlays. projekt.commons.theme.OverlayPackageInfo A data class of an overlay package. projekt.commons.theme.ThemeApp Main class of this library. projekt.commons.theme.ThemeApplication Base Application class for theme app. projekt.commons.theme.ThemeAppOptions Class to represent the options for theme app configurations.","title":"All Types"},{"location":"theme/projekt.commons.theme/","text":"theme / projekt.commons.theme Package projekt.commons.theme \u00b6 Types \u00b6 Name Summary OverlayBuilder class OverlayBuilder A class for building overlays. OverlayPackageInfo data class OverlayPackageInfo A data class of an overlay package. ThemeApp object ThemeApp Main class of this library. ThemeApplication open class ThemeApplication : Application Base Application class for theme app. ThemeAppOptions class ThemeAppOptions Class to represent the options for theme app configurations.","title":"Home"},{"location":"theme/projekt.commons.theme/#package-projektcommonstheme","text":"","title":"Package projekt.commons.theme"},{"location":"theme/projekt.commons.theme/#types","text":"Name Summary OverlayBuilder class OverlayBuilder A class for building overlays. OverlayPackageInfo data class OverlayPackageInfo A data class of an overlay package. ThemeApp object ThemeApp Main class of this library. ThemeApplication open class ThemeApplication : Application Base Application class for theme app. ThemeAppOptions class ThemeAppOptions Class to represent the options for theme app configurations.","title":"Types"},{"location":"theme/projekt.commons.theme/-overlay-builder/","text":"theme / projekt.commons.theme / OverlayBuilder OverlayBuilder \u00b6 class OverlayBuilder A class for building overlays. Parameters \u00b6 packageName - Overlay package name. targetPackageName - Overlay target package name. timestamp - install timestamp, System.currentTimeMillis can be used for this. versionCode - Overlay version code. versionName - Overlay version name. label - Overlay package label. metaData - Collections of metadata to be added to the overlay manifest. outDir - target directory to put the generated overlay. Types \u00b6 Name Summary Result sealed class Result This class represents the result of exec . Constructors \u00b6 Name Summary <init> OverlayBuilder(packageName: String , targetPackageName: String , timestamp: Long , versionCode: Int ? = null, versionName: String ? = null, label: String ? = null, metaData: ArrayMap < String , String >? = null, outDir: File = File(ThemeApplication.instance.externalCacheDir, \"overlays\")) A class for building overlays. Functions \u00b6 Name Summary addExtraBasePackage fun addExtraBasePackage(basePackage: String ): Unit Adds extra base package (APK) to compile the overlays with. Equivalent with the -I modifiers on AAPT. addResourceDir fun addResourceDir(resDir: File ): Unit Adds directory of resources to be compiled. Equivalent with the -S modifiers on AAPT. exec fun exec(): OverlayBuilder.Result Runs the overlay builder. setAssetDir fun setAssetDir(_assetDir: File ): Unit Sets directory of asset to be compiled. Equivalent with the -A modifiers on AAPT.","title":"Home"},{"location":"theme/projekt.commons.theme/-overlay-builder/#overlaybuilder","text":"class OverlayBuilder A class for building overlays.","title":"OverlayBuilder"},{"location":"theme/projekt.commons.theme/-overlay-builder/#parameters","text":"packageName - Overlay package name. targetPackageName - Overlay target package name. timestamp - install timestamp, System.currentTimeMillis can be used for this. versionCode - Overlay version code. versionName - Overlay version name. label - Overlay package label. metaData - Collections of metadata to be added to the overlay manifest. outDir - target directory to put the generated overlay.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/#types","text":"Name Summary Result sealed class Result This class represents the result of exec .","title":"Types"},{"location":"theme/projekt.commons.theme/-overlay-builder/#constructors","text":"Name Summary <init> OverlayBuilder(packageName: String , targetPackageName: String , timestamp: Long , versionCode: Int ? = null, versionName: String ? = null, label: String ? = null, metaData: ArrayMap < String , String >? = null, outDir: File = File(ThemeApplication.instance.externalCacheDir, \"overlays\")) A class for building overlays.","title":"Constructors"},{"location":"theme/projekt.commons.theme/-overlay-builder/#functions","text":"Name Summary addExtraBasePackage fun addExtraBasePackage(basePackage: String ): Unit Adds extra base package (APK) to compile the overlays with. Equivalent with the -I modifiers on AAPT. addResourceDir fun addResourceDir(resDir: File ): Unit Adds directory of resources to be compiled. Equivalent with the -S modifiers on AAPT. exec fun exec(): OverlayBuilder.Result Runs the overlay builder. setAssetDir fun setAssetDir(_assetDir: File ): Unit Sets directory of asset to be compiled. Equivalent with the -A modifiers on AAPT.","title":"Functions"},{"location":"theme/projekt.commons.theme/-overlay-builder/-init-/","text":"theme / projekt.commons.theme / OverlayBuilder / <init> <init> \u00b6 OverlayBuilder(packageName: String , targetPackageName: String , timestamp: Long , versionCode: Int ? = null, versionName: String ? = null, label: String ? = null, metaData: ArrayMap < String , String >? = null, outDir: File = File(ThemeApplication.instance.externalCacheDir, \"overlays\")) A class for building overlays. Parameters \u00b6 packageName - Overlay package name. targetPackageName - Overlay target package name. timestamp - install timestamp, System.currentTimeMillis can be used for this. versionCode - Overlay version code. versionName - Overlay version name. label - Overlay package label. metaData - Collections of metadata to be added to the overlay manifest. outDir - target directory to put the generated overlay.","title":" init "},{"location":"theme/projekt.commons.theme/-overlay-builder/-init-/#init","text":"OverlayBuilder(packageName: String , targetPackageName: String , timestamp: Long , versionCode: Int ? = null, versionName: String ? = null, label: String ? = null, metaData: ArrayMap < String , String >? = null, outDir: File = File(ThemeApplication.instance.externalCacheDir, \"overlays\")) A class for building overlays.","title":"&lt;init&gt;"},{"location":"theme/projekt.commons.theme/-overlay-builder/-init-/#parameters","text":"packageName - Overlay package name. targetPackageName - Overlay target package name. timestamp - install timestamp, System.currentTimeMillis can be used for this. versionCode - Overlay version code. versionName - Overlay version name. label - Overlay package label. metaData - Collections of metadata to be added to the overlay manifest. outDir - target directory to put the generated overlay.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/add-extra-base-package/","text":"theme / projekt.commons.theme / OverlayBuilder / addExtraBasePackage addExtraBasePackage \u00b6 fun addExtraBasePackage(basePackage: String ): Unit Adds extra base package (APK) to compile the overlays with. Equivalent with the -I modifiers on AAPT. This method can be called multiple times as multiple base package is supported. Parameters \u00b6 basePackage - Absolute path of the package.","title":"Add extra base package"},{"location":"theme/projekt.commons.theme/-overlay-builder/add-extra-base-package/#addextrabasepackage","text":"fun addExtraBasePackage(basePackage: String ): Unit Adds extra base package (APK) to compile the overlays with. Equivalent with the -I modifiers on AAPT. This method can be called multiple times as multiple base package is supported.","title":"addExtraBasePackage"},{"location":"theme/projekt.commons.theme/-overlay-builder/add-extra-base-package/#parameters","text":"basePackage - Absolute path of the package.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/add-resource-dir/","text":"theme / projekt.commons.theme / OverlayBuilder / addResourceDir addResourceDir \u00b6 fun addResourceDir(resDir: File ): Unit Adds directory of resources to be compiled. Equivalent with the -S modifiers on AAPT. This method can be called multiple times as multiple resource directories is supported. Parameters \u00b6 resDir - directory of resources.","title":"Add resource dir"},{"location":"theme/projekt.commons.theme/-overlay-builder/add-resource-dir/#addresourcedir","text":"fun addResourceDir(resDir: File ): Unit Adds directory of resources to be compiled. Equivalent with the -S modifiers on AAPT. This method can be called multiple times as multiple resource directories is supported.","title":"addResourceDir"},{"location":"theme/projekt.commons.theme/-overlay-builder/add-resource-dir/#parameters","text":"resDir - directory of resources.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/exec/","text":"theme / projekt.commons.theme / OverlayBuilder / exec exec \u00b6 fun exec(): OverlayBuilder.Result Runs the overlay builder. Return Result of builder in form of Result . See Also Result","title":"Exec"},{"location":"theme/projekt.commons.theme/-overlay-builder/exec/#exec","text":"fun exec(): OverlayBuilder.Result Runs the overlay builder. Return Result of builder in form of Result . See Also Result","title":"exec"},{"location":"theme/projekt.commons.theme/-overlay-builder/set-asset-dir/","text":"theme / projekt.commons.theme / OverlayBuilder / setAssetDir setAssetDir \u00b6 fun setAssetDir(_assetDir: File ): Unit Sets directory of asset to be compiled. Equivalent with the -A modifiers on AAPT. AAPT only supports one asset directory so this method will replace the previously set asset directory. Parameters \u00b6 _assetDir - directory of asset.","title":"Set asset dir"},{"location":"theme/projekt.commons.theme/-overlay-builder/set-asset-dir/#setassetdir","text":"fun setAssetDir(_assetDir: File ): Unit Sets directory of asset to be compiled. Equivalent with the -A modifiers on AAPT. AAPT only supports one asset directory so this method will replace the previously set asset directory.","title":"setAssetDir"},{"location":"theme/projekt.commons.theme/-overlay-builder/set-asset-dir/#parameters","text":"_assetDir - directory of asset.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/","text":"theme / projekt.commons.theme / OverlayBuilder / Result Result \u00b6 sealed class Result This class represents the result of exec . See Also exec Types \u00b6 Name Summary Failure class Failure : OverlayBuilder.Result Operation is failed Success class Success : OverlayBuilder.Result Operation is success Inheritors \u00b6 Name Summary Failure class Failure : OverlayBuilder.Result Operation is failed Success class Success : OverlayBuilder.Result Operation is success","title":"Home"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/#result","text":"sealed class Result This class represents the result of exec . See Also exec","title":"Result"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/#types","text":"Name Summary Failure class Failure : OverlayBuilder.Result Operation is failed Success class Success : OverlayBuilder.Result Operation is success","title":"Types"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/#inheritors","text":"Name Summary Failure class Failure : OverlayBuilder.Result Operation is failed Success class Success : OverlayBuilder.Result Operation is success","title":"Inheritors"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/","text":"theme / projekt.commons.theme / OverlayBuilder / Result / Failure Failure \u00b6 class Failure : OverlayBuilder.Result Operation is failed Parameters \u00b6 message - The error message from the operation. Constructors \u00b6 Name Summary <init> Failure(message: String ) Operation is failed Properties \u00b6 Name Summary message val message: String The error message from the operation.","title":"Home"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/#failure","text":"class Failure : OverlayBuilder.Result Operation is failed","title":"Failure"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/#parameters","text":"message - The error message from the operation.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/#constructors","text":"Name Summary <init> Failure(message: String ) Operation is failed","title":"Constructors"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/#properties","text":"Name Summary message val message: String The error message from the operation.","title":"Properties"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/-init-/","text":"theme / projekt.commons.theme / OverlayBuilder / Result / Failure / <init> <init> \u00b6 Failure(message: String ) Operation is failed Parameters \u00b6 message - The error message from the operation.","title":" init "},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/-init-/#init","text":"Failure(message: String ) Operation is failed","title":"&lt;init&gt;"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/-init-/#parameters","text":"message - The error message from the operation.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/message/","text":"theme / projekt.commons.theme / OverlayBuilder / Result / Failure / message message \u00b6 val message: String The error message from the operation.","title":"Message"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-failure/message/#message","text":"val message: String The error message from the operation.","title":"message"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/","text":"theme / projekt.commons.theme / OverlayBuilder / Result / Success Success \u00b6 class Success : OverlayBuilder.Result Operation is success Parameters \u00b6 path - Path of generated overlay. Constructors \u00b6 Name Summary <init> Success(path: String ) Operation is success Properties \u00b6 Name Summary path val path: String Path of generated overlay.","title":"Home"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/#success","text":"class Success : OverlayBuilder.Result Operation is success","title":"Success"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/#parameters","text":"path - Path of generated overlay.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/#constructors","text":"Name Summary <init> Success(path: String ) Operation is success","title":"Constructors"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/#properties","text":"Name Summary path val path: String Path of generated overlay.","title":"Properties"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/-init-/","text":"theme / projekt.commons.theme / OverlayBuilder / Result / Success / <init> <init> \u00b6 Success(path: String ) Operation is success Parameters \u00b6 path - Path of generated overlay.","title":" init "},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/-init-/#init","text":"Success(path: String ) Operation is success","title":"&lt;init&gt;"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/-init-/#parameters","text":"path - Path of generated overlay.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/path/","text":"theme / projekt.commons.theme / OverlayBuilder / Result / Success / path path \u00b6 val path: String Path of generated overlay.","title":"Path"},{"location":"theme/projekt.commons.theme/-overlay-builder/-result/-success/path/#path","text":"val path: String Path of generated overlay.","title":"path"},{"location":"theme/projekt.commons.theme/-overlay-package-info/","text":"theme / projekt.commons.theme / OverlayPackageInfo OverlayPackageInfo \u00b6 data class OverlayPackageInfo A data class of an overlay package. Parameters \u00b6 name - Package name of the overlay. versionCode - Version code of the overlay. versionName - Version name of the overlay. metaData - Bundle of metadata pulled from the overlay manifest. Constructors \u00b6 Name Summary <init> OverlayPackageInfo(name: String , versionCode: Long , versionName: String , metaData: Bundle ) A data class of an overlay package. Properties \u00b6 Name Summary metaData val metaData: Bundle Bundle of metadata pulled from the overlay manifest. name val name: String Package name of the overlay. versionCode val versionCode: Long Version code of the overlay. versionName val versionName: String Version name of the overlay.","title":"Home"},{"location":"theme/projekt.commons.theme/-overlay-package-info/#overlaypackageinfo","text":"data class OverlayPackageInfo A data class of an overlay package.","title":"OverlayPackageInfo"},{"location":"theme/projekt.commons.theme/-overlay-package-info/#parameters","text":"name - Package name of the overlay. versionCode - Version code of the overlay. versionName - Version name of the overlay. metaData - Bundle of metadata pulled from the overlay manifest.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-package-info/#constructors","text":"Name Summary <init> OverlayPackageInfo(name: String , versionCode: Long , versionName: String , metaData: Bundle ) A data class of an overlay package.","title":"Constructors"},{"location":"theme/projekt.commons.theme/-overlay-package-info/#properties","text":"Name Summary metaData val metaData: Bundle Bundle of metadata pulled from the overlay manifest. name val name: String Package name of the overlay. versionCode val versionCode: Long Version code of the overlay. versionName val versionName: String Version name of the overlay.","title":"Properties"},{"location":"theme/projekt.commons.theme/-overlay-package-info/-init-/","text":"theme / projekt.commons.theme / OverlayPackageInfo / <init> <init> \u00b6 OverlayPackageInfo(name: String , versionCode: Long , versionName: String , metaData: Bundle ) A data class of an overlay package. Parameters \u00b6 name - Package name of the overlay. versionCode - Version code of the overlay. versionName - Version name of the overlay. metaData - Bundle of metadata pulled from the overlay manifest.","title":" init "},{"location":"theme/projekt.commons.theme/-overlay-package-info/-init-/#init","text":"OverlayPackageInfo(name: String , versionCode: Long , versionName: String , metaData: Bundle ) A data class of an overlay package.","title":"&lt;init&gt;"},{"location":"theme/projekt.commons.theme/-overlay-package-info/-init-/#parameters","text":"name - Package name of the overlay. versionCode - Version code of the overlay. versionName - Version name of the overlay. metaData - Bundle of metadata pulled from the overlay manifest.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-overlay-package-info/meta-data/","text":"theme / projekt.commons.theme / OverlayPackageInfo / metaData metaData \u00b6 val metaData: Bundle Bundle of metadata pulled from the overlay manifest.","title":"Meta data"},{"location":"theme/projekt.commons.theme/-overlay-package-info/meta-data/#metadata","text":"val metaData: Bundle Bundle of metadata pulled from the overlay manifest.","title":"metaData"},{"location":"theme/projekt.commons.theme/-overlay-package-info/name/","text":"theme / projekt.commons.theme / OverlayPackageInfo / name name \u00b6 val name: String Package name of the overlay.","title":"Name"},{"location":"theme/projekt.commons.theme/-overlay-package-info/name/#name","text":"val name: String Package name of the overlay.","title":"name"},{"location":"theme/projekt.commons.theme/-overlay-package-info/version-code/","text":"theme / projekt.commons.theme / OverlayPackageInfo / versionCode versionCode \u00b6 val versionCode: Long Version code of the overlay.","title":"Version code"},{"location":"theme/projekt.commons.theme/-overlay-package-info/version-code/#versioncode","text":"val versionCode: Long Version code of the overlay.","title":"versionCode"},{"location":"theme/projekt.commons.theme/-overlay-package-info/version-name/","text":"theme / projekt.commons.theme / OverlayPackageInfo / versionName versionName \u00b6 val versionName: String Version name of the overlay.","title":"Version name"},{"location":"theme/projekt.commons.theme/-overlay-package-info/version-name/#versionname","text":"val versionName: String Version name of the overlay.","title":"versionName"},{"location":"theme/projekt.commons.theme/-theme-app/","text":"theme / projekt.commons.theme / ThemeApp ThemeApp \u00b6 object ThemeApp Main class of this library. Types \u00b6 Name Summary InitResult sealed class InitResult This class represents the result of Backend initialization. OverlayState object OverlayState Used to represent status of the installed overlay Properties \u00b6 Name Summary isAndromeda val isAndromeda: Boolean Returns true if the active Backend uses Andromeda Server. isAndromedaSamsung val isAndromedaSamsung: Boolean Returns true if the active Backend uses Andromeda Backend and if Build.VERSION.SDK_INT < Build.VERSION_CODES.P isPieRoot val isPieRoot: Boolean Returns true if the active Backend uses root and if Build.VERSION.SDK_INT >= Build.VERSION_CODES.P . isRoot val isRoot: Boolean Returns true if the active Backend uses root. isSubstratumOms val isSubstratumOms: Boolean Returns true if the host OS runs modified version of OMS. Usually custom ROMs. isSubstratumService val isSubstratumService: Boolean Returns true if the active Backend uses Substratum Service. isSupportCustomFonts val isSupportCustomFonts: Boolean This checks exists because custom fonts support is kind of broken on P+ isSynergy val isSynergy: Boolean Returns true if the active Backend uses Synergy magiskInstalledOverlay val magiskInstalledOverlay: List < OverlayPackageInfo > Returns list of overlays in form of OverlayPackageInfo in the magisk install location. OVERLAY_PERMISSION val OVERLAY_PERMISSION: String Any overlays generated by this library will always have this \u201cpermission\u201d. SAMSUNG_OVERLAY_PERMISSION const val SAMSUNG_OVERLAY_PERMISSION: String Any overlays generated by this library will always have this permission if the host device runs Samsung OS. Functions \u00b6 Name Summary canUseSamsungExposure fun canUseSamsungExposure(): Boolean Checks whether the Samsung theme exposures can be used. getBackend fun getBackend(options: ThemeAppOptions ): Backend ? Get theme application backend with specified options. If the backend is uninitialized, this method will try silently initialize it, assuming all the requirements (permissions etc) for supported backend are fulfilled. If not, then null will be returned. getInitIntent fun getInitIntent(context: Context , options: ThemeAppOptions ): Intent Returns an activity Intent to initialize the Backend for the theme app. getOverlayPackageInfo fun getOverlayPackageInfo(overlayPackageName: String ): OverlayPackageInfo ? Reads details of an installed overlay. getResultFromIntent fun getResultFromIntent(intent: Intent ): ThemeApp.InitResult Returns InitResult from init result intent. isSamsungExposureAvailable fun isSamsungExposureAvailable(): Boolean Checks whether the Samsung theme exposures is available to use. isSamsungExposureEnabled fun isSamsungExposureEnabled(): Boolean Checks whether the Samsung exposures is enabled. setSamsungExposureEnabled fun setSamsungExposureEnabled(enabled: Boolean ): Unit Enables or disables the available Samsung exposures. If it can\u2019t be used this method will fail silently.","title":"Home"},{"location":"theme/projekt.commons.theme/-theme-app/#themeapp","text":"object ThemeApp Main class of this library.","title":"ThemeApp"},{"location":"theme/projekt.commons.theme/-theme-app/#types","text":"Name Summary InitResult sealed class InitResult This class represents the result of Backend initialization. OverlayState object OverlayState Used to represent status of the installed overlay","title":"Types"},{"location":"theme/projekt.commons.theme/-theme-app/#properties","text":"Name Summary isAndromeda val isAndromeda: Boolean Returns true if the active Backend uses Andromeda Server. isAndromedaSamsung val isAndromedaSamsung: Boolean Returns true if the active Backend uses Andromeda Backend and if Build.VERSION.SDK_INT < Build.VERSION_CODES.P isPieRoot val isPieRoot: Boolean Returns true if the active Backend uses root and if Build.VERSION.SDK_INT >= Build.VERSION_CODES.P . isRoot val isRoot: Boolean Returns true if the active Backend uses root. isSubstratumOms val isSubstratumOms: Boolean Returns true if the host OS runs modified version of OMS. Usually custom ROMs. isSubstratumService val isSubstratumService: Boolean Returns true if the active Backend uses Substratum Service. isSupportCustomFonts val isSupportCustomFonts: Boolean This checks exists because custom fonts support is kind of broken on P+ isSynergy val isSynergy: Boolean Returns true if the active Backend uses Synergy magiskInstalledOverlay val magiskInstalledOverlay: List < OverlayPackageInfo > Returns list of overlays in form of OverlayPackageInfo in the magisk install location. OVERLAY_PERMISSION val OVERLAY_PERMISSION: String Any overlays generated by this library will always have this \u201cpermission\u201d. SAMSUNG_OVERLAY_PERMISSION const val SAMSUNG_OVERLAY_PERMISSION: String Any overlays generated by this library will always have this permission if the host device runs Samsung OS.","title":"Properties"},{"location":"theme/projekt.commons.theme/-theme-app/#functions","text":"Name Summary canUseSamsungExposure fun canUseSamsungExposure(): Boolean Checks whether the Samsung theme exposures can be used. getBackend fun getBackend(options: ThemeAppOptions ): Backend ? Get theme application backend with specified options. If the backend is uninitialized, this method will try silently initialize it, assuming all the requirements (permissions etc) for supported backend are fulfilled. If not, then null will be returned. getInitIntent fun getInitIntent(context: Context , options: ThemeAppOptions ): Intent Returns an activity Intent to initialize the Backend for the theme app. getOverlayPackageInfo fun getOverlayPackageInfo(overlayPackageName: String ): OverlayPackageInfo ? Reads details of an installed overlay. getResultFromIntent fun getResultFromIntent(intent: Intent ): ThemeApp.InitResult Returns InitResult from init result intent. isSamsungExposureAvailable fun isSamsungExposureAvailable(): Boolean Checks whether the Samsung theme exposures is available to use. isSamsungExposureEnabled fun isSamsungExposureEnabled(): Boolean Checks whether the Samsung exposures is enabled. setSamsungExposureEnabled fun setSamsungExposureEnabled(enabled: Boolean ): Unit Enables or disables the available Samsung exposures. If it can\u2019t be used this method will fail silently.","title":"Functions"},{"location":"theme/projekt.commons.theme/-theme-app/-o-v-e-r-l-a-y_-p-e-r-m-i-s-s-i-o-n/","text":"theme / projekt.commons.theme / ThemeApp / OVERLAY_PERMISSION OVERLAY_PERMISSION \u00b6 val OVERLAY_PERMISSION: String Any overlays generated by this library will always have this \u201cpermission\u201d.","title":" o v e r l a y  p e r m i s s i o n"},{"location":"theme/projekt.commons.theme/-theme-app/-o-v-e-r-l-a-y_-p-e-r-m-i-s-s-i-o-n/#overlay_permission","text":"val OVERLAY_PERMISSION: String Any overlays generated by this library will always have this \u201cpermission\u201d.","title":"OVERLAY_PERMISSION"},{"location":"theme/projekt.commons.theme/-theme-app/-s-a-m-s-u-n-g_-o-v-e-r-l-a-y_-p-e-r-m-i-s-s-i-o-n/","text":"theme / projekt.commons.theme / ThemeApp / SAMSUNG_OVERLAY_PERMISSION SAMSUNG_OVERLAY_PERMISSION \u00b6 const val SAMSUNG_OVERLAY_PERMISSION: String Any overlays generated by this library will always have this permission if the host device runs Samsung OS.","title":" s a m s u n g  o v e r l a y  p e r m i s s i o n"},{"location":"theme/projekt.commons.theme/-theme-app/-s-a-m-s-u-n-g_-o-v-e-r-l-a-y_-p-e-r-m-i-s-s-i-o-n/#samsung_overlay_permission","text":"const val SAMSUNG_OVERLAY_PERMISSION: String Any overlays generated by this library will always have this permission if the host device runs Samsung OS.","title":"SAMSUNG_OVERLAY_PERMISSION"},{"location":"theme/projekt.commons.theme/-theme-app/can-use-samsung-exposure/","text":"theme / projekt.commons.theme / ThemeApp / canUseSamsungExposure canUseSamsungExposure \u00b6 fun canUseSamsungExposure(): Boolean Checks whether the Samsung theme exposures can be used. Return true if default system theme is applied or the exposures is turned on by this library, false otherwise. Also returns false if it\u2019s not available to use on the host OS See Also isSamsungExposureAvailable setSamsungExposureEnabled isSamsungExposureEnabled","title":"Can use samsung exposure"},{"location":"theme/projekt.commons.theme/-theme-app/can-use-samsung-exposure/#canusesamsungexposure","text":"fun canUseSamsungExposure(): Boolean Checks whether the Samsung theme exposures can be used. Return true if default system theme is applied or the exposures is turned on by this library, false otherwise. Also returns false if it\u2019s not available to use on the host OS See Also isSamsungExposureAvailable setSamsungExposureEnabled isSamsungExposureEnabled","title":"canUseSamsungExposure"},{"location":"theme/projekt.commons.theme/-theme-app/get-backend/","text":"theme / projekt.commons.theme / ThemeApp / getBackend getBackend \u00b6 fun getBackend(options: ThemeAppOptions ): Backend ? Get theme application backend with specified options. If the backend is uninitialized, this method will try silently initialize it, assuming all the requirements (permissions etc) for supported backend are fulfilled. If not, then null will be returned.","title":"Get backend"},{"location":"theme/projekt.commons.theme/-theme-app/get-backend/#getbackend","text":"fun getBackend(options: ThemeAppOptions ): Backend ? Get theme application backend with specified options. If the backend is uninitialized, this method will try silently initialize it, assuming all the requirements (permissions etc) for supported backend are fulfilled. If not, then null will be returned.","title":"getBackend"},{"location":"theme/projekt.commons.theme/-theme-app/get-init-intent/","text":"theme / projekt.commons.theme / ThemeApp / getInitIntent getInitIntent \u00b6 fun getInitIntent(context: Context , options: ThemeAppOptions ): Intent Returns an activity Intent to initialize the Backend for the theme app. Parameters \u00b6 context - Context. options - Options of supported architecture and backend.","title":"Get init intent"},{"location":"theme/projekt.commons.theme/-theme-app/get-init-intent/#getinitintent","text":"fun getInitIntent(context: Context , options: ThemeAppOptions ): Intent Returns an activity Intent to initialize the Backend for the theme app.","title":"getInitIntent"},{"location":"theme/projekt.commons.theme/-theme-app/get-init-intent/#parameters","text":"context - Context. options - Options of supported architecture and backend.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-theme-app/get-overlay-package-info/","text":"theme / projekt.commons.theme / ThemeApp / getOverlayPackageInfo getOverlayPackageInfo \u00b6 fun getOverlayPackageInfo(overlayPackageName: String ): OverlayPackageInfo ? Reads details of an installed overlay. Parameters \u00b6 overlayPackageName - package name of overlay to be read. Return Overlay details in form of OverlayPackageInfo , null if the overlay can\u2019t be read.","title":"Get overlay package info"},{"location":"theme/projekt.commons.theme/-theme-app/get-overlay-package-info/#getoverlaypackageinfo","text":"fun getOverlayPackageInfo(overlayPackageName: String ): OverlayPackageInfo ? Reads details of an installed overlay.","title":"getOverlayPackageInfo"},{"location":"theme/projekt.commons.theme/-theme-app/get-overlay-package-info/#parameters","text":"overlayPackageName - package name of overlay to be read. Return Overlay details in form of OverlayPackageInfo , null if the overlay can\u2019t be read.","title":"Parameters"},{"location":"theme/projekt.commons.theme/-theme-app/get-result-from-intent/","text":"theme / projekt.commons.theme / ThemeApp / getResultFromIntent getResultFromIntent \u00b6 fun getResultFromIntent(intent: Intent ): ThemeApp.InitResult Returns InitResult from init result intent. Parameters \u00b6 intent - result intent to be read. See Also getInitIntent","title":"Get result from intent"},{"location":"theme/projekt.commons.theme/-theme-app/get-result-from-intent/#getresultfromintent","text":"fun getResultFromIntent(intent: Intent ): ThemeApp.InitResult Returns InitResult from init result intent.","title":"getResultFromIntent"},{"location":"theme/projekt.commons.theme/-theme-app/get-result-from-intent/#parameters","text":"intent - result intent to be read. See Also getInitIntent","title":"Parameters"},{"location":"theme/projekt.commons.theme/-theme-app/is-andromeda-samsung/","text":"theme / projekt.commons.theme / ThemeApp / isAndromedaSamsung isAndromedaSamsung \u00b6 val isAndromedaSamsung: Boolean Returns true if the active Backend uses Andromeda Backend and if Build.VERSION.SDK_INT < Build.VERSION_CODES.P","title":"Is andromeda samsung"},{"location":"theme/projekt.commons.theme/-theme-app/is-andromeda-samsung/#isandromedasamsung","text":"val isAndromedaSamsung: Boolean Returns true if the active Backend uses Andromeda Backend and if Build.VERSION.SDK_INT < Build.VERSION_CODES.P","title":"isAndromedaSamsung"},{"location":"theme/projekt.commons.theme/-theme-app/is-andromeda/","text":"theme / projekt.commons.theme / ThemeApp / isAndromeda isAndromeda \u00b6 val isAndromeda: Boolean Returns true if the active Backend uses Andromeda Server.","title":"Is andromeda"},{"location":"theme/projekt.commons.theme/-theme-app/is-andromeda/#isandromeda","text":"val isAndromeda: Boolean Returns true if the active Backend uses Andromeda Server.","title":"isAndromeda"},{"location":"theme/projekt.commons.theme/-theme-app/is-pie-root/","text":"theme / projekt.commons.theme / ThemeApp / isPieRoot isPieRoot \u00b6 val isPieRoot: Boolean Returns true if the active Backend uses root and if Build.VERSION.SDK_INT >= Build.VERSION_CODES.P .","title":"Is pie root"},{"location":"theme/projekt.commons.theme/-theme-app/is-pie-root/#ispieroot","text":"val isPieRoot: Boolean Returns true if the active Backend uses root and if Build.VERSION.SDK_INT >= Build.VERSION_CODES.P .","title":"isPieRoot"},{"location":"theme/projekt.commons.theme/-theme-app/is-root/","text":"theme / projekt.commons.theme / ThemeApp / isRoot isRoot \u00b6 val isRoot: Boolean Returns true if the active Backend uses root.","title":"Is root"},{"location":"theme/projekt.commons.theme/-theme-app/is-root/#isroot","text":"val isRoot: Boolean Returns true if the active Backend uses root.","title":"isRoot"},{"location":"theme/projekt.commons.theme/-theme-app/is-samsung-exposure-available/","text":"theme / projekt.commons.theme / ThemeApp / isSamsungExposureAvailable isSamsungExposureAvailable \u00b6 fun isSamsungExposureAvailable(): Boolean Checks whether the Samsung theme exposures is available to use. Return true if host runs Samsung OS and is rooted. See Also canUseSamsungExposure setSamsungExposureEnabled isSamsungExposureEnabled","title":"Is samsung exposure available"},{"location":"theme/projekt.commons.theme/-theme-app/is-samsung-exposure-available/#issamsungexposureavailable","text":"fun isSamsungExposureAvailable(): Boolean Checks whether the Samsung theme exposures is available to use. Return true if host runs Samsung OS and is rooted. See Also canUseSamsungExposure setSamsungExposureEnabled isSamsungExposureEnabled","title":"isSamsungExposureAvailable"},{"location":"theme/projekt.commons.theme/-theme-app/is-samsung-exposure-enabled/","text":"theme / projekt.commons.theme / ThemeApp / isSamsungExposureEnabled isSamsungExposureEnabled \u00b6 fun isSamsungExposureEnabled(): Boolean Checks whether the Samsung exposures is enabled. Return true if Samsung exposures is enabled, false otherwise. Also returns false if it\u2019s not available to use on the host OS. See Also isSamsungExposureAvailable canUseSamsungExposure setSamsungExposureEnabled","title":"Is samsung exposure enabled"},{"location":"theme/projekt.commons.theme/-theme-app/is-samsung-exposure-enabled/#issamsungexposureenabled","text":"fun isSamsungExposureEnabled(): Boolean Checks whether the Samsung exposures is enabled. Return true if Samsung exposures is enabled, false otherwise. Also returns false if it\u2019s not available to use on the host OS. See Also isSamsungExposureAvailable canUseSamsungExposure setSamsungExposureEnabled","title":"isSamsungExposureEnabled"},{"location":"theme/projekt.commons.theme/-theme-app/is-substratum-oms/","text":"theme / projekt.commons.theme / ThemeApp / isSubstratumOms isSubstratumOms \u00b6 val isSubstratumOms: Boolean Returns true if the host OS runs modified version of OMS. Usually custom ROMs. See Also isSubstratumService","title":"Is substratum oms"},{"location":"theme/projekt.commons.theme/-theme-app/is-substratum-oms/#issubstratumoms","text":"val isSubstratumOms: Boolean Returns true if the host OS runs modified version of OMS. Usually custom ROMs. See Also isSubstratumService","title":"isSubstratumOms"},{"location":"theme/projekt.commons.theme/-theme-app/is-substratum-service/","text":"theme / projekt.commons.theme / ThemeApp / isSubstratumService isSubstratumService \u00b6 val isSubstratumService: Boolean Returns true if the active Backend uses Substratum Service. See Also isSubstratumOms","title":"Is substratum service"},{"location":"theme/projekt.commons.theme/-theme-app/is-substratum-service/#issubstratumservice","text":"val isSubstratumService: Boolean Returns true if the active Backend uses Substratum Service. See Also isSubstratumOms","title":"isSubstratumService"},{"location":"theme/projekt.commons.theme/-theme-app/is-support-custom-fonts/","text":"theme / projekt.commons.theme / ThemeApp / isSupportCustomFonts isSupportCustomFonts \u00b6 val isSupportCustomFonts: Boolean This checks exists because custom fonts support is kind of broken on P+ See Also isSubstratumService","title":"Is support custom fonts"},{"location":"theme/projekt.commons.theme/-theme-app/is-support-custom-fonts/#issupportcustomfonts","text":"val isSupportCustomFonts: Boolean This checks exists because custom fonts support is kind of broken on P+ See Also isSubstratumService","title":"isSupportCustomFonts"},{"location":"theme/projekt.commons.theme/-theme-app/is-synergy/","text":"theme / projekt.commons.theme / ThemeApp / isSynergy isSynergy \u00b6 val isSynergy: Boolean Returns true if the active Backend uses Synergy","title":"Is synergy"},{"location":"theme/projekt.commons.theme/-theme-app/is-synergy/#issynergy","text":"val isSynergy: Boolean Returns true if the active Backend uses Synergy","title":"isSynergy"},{"location":"theme/projekt.commons.theme/-theme-app/magisk-installed-overlay/","text":"theme / projekt.commons.theme / ThemeApp / magiskInstalledOverlay magiskInstalledOverlay \u00b6 val magiskInstalledOverlay: List < OverlayPackageInfo > Returns list of overlays in form of OverlayPackageInfo in the magisk install location. Helpful to read overlay without the need of PackageManager .","title":"Magisk installed overlay"},{"location":"theme/projekt.commons.theme/-theme-app/magisk-installed-overlay/#magiskinstalledoverlay","text":"val magiskInstalledOverlay: List < OverlayPackageInfo > Returns list of overlays in form of OverlayPackageInfo in the magisk install location. Helpful to read overlay without the need of PackageManager .","title":"magiskInstalledOverlay"},{"location":"theme/projekt.commons.theme/-theme-app/set-samsung-exposure-enabled/","text":"theme / projekt.commons.theme / ThemeApp / setSamsungExposureEnabled setSamsungExposureEnabled \u00b6 fun setSamsungExposureEnabled(enabled: Boolean ): Unit Enables or disables the available Samsung exposures. If it can\u2019t be used this method will fail silently. Parameters \u00b6 enabled - true to enable, false otherwise. See Also isSamsungExposureAvailable canUseSamsungExposure isSamsungExposureEnabled","title":"Set samsung exposure enabled"},{"location":"theme/projekt.commons.theme/-theme-app/set-samsung-exposure-enabled/#setsamsungexposureenabled","text":"fun setSamsungExposureEnabled(enabled: Boolean ): Unit Enables or disables the available Samsung exposures. If it can\u2019t be used this method will fail silently.","title":"setSamsungExposureEnabled"},{"location":"theme/projekt.commons.theme/-theme-app/set-samsung-exposure-enabled/#parameters","text":"enabled - true to enable, false otherwise. See Also isSamsungExposureAvailable canUseSamsungExposure isSamsungExposureEnabled","title":"Parameters"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/","text":"theme / projekt.commons.theme / ThemeApp / InitResult InitResult \u00b6 sealed class InitResult This class represents the result of Backend initialization. See Also getInitIntent getResultFromIntent Types \u00b6 Name Summary AndromedaDeniedFailure object AndromedaDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the app is not permitted to access it. AndromedaInactiveFailure object AndromedaInactiveFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the Server is inactive. ArchNotSupportedFailure object ArchNotSupportedFailure : ThemeApp.InitResult Initialization is failed because host architecture is not supported. MagiskDisabledFailure object MagiskDisabledFailure : ThemeApp.InitResult Initialization is failed because the helper magisk module is disabled. NoSupportedBackendFailure object NoSupportedBackendFailure : ThemeApp.InitResult Initialization is failed because no supported Backend is available on the device. RootDeniedFailure object RootDeniedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but root access for the app is denied. RootNotSupportedFailure object RootNotSupportedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but the host root system is not supported. SubstratumServiceDeniedFailure object SubstratumServiceDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Substratum Service but the app is not permitted to access it. Success object Success : ThemeApp.InitResult Initialization is succeeded. UnknownFailure object UnknownFailure : ThemeApp.InitResult We\u2019re not even sure why you able to go this deep. Inheritors \u00b6 Name Summary AndromedaDeniedFailure object AndromedaDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the app is not permitted to access it. AndromedaInactiveFailure object AndromedaInactiveFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the Server is inactive. ArchNotSupportedFailure object ArchNotSupportedFailure : ThemeApp.InitResult Initialization is failed because host architecture is not supported. MagiskDisabledFailure object MagiskDisabledFailure : ThemeApp.InitResult Initialization is failed because the helper magisk module is disabled. NoSupportedBackendFailure object NoSupportedBackendFailure : ThemeApp.InitResult Initialization is failed because no supported Backend is available on the device. RootDeniedFailure object RootDeniedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but root access for the app is denied. RootNotSupportedFailure object RootNotSupportedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but the host root system is not supported. SubstratumServiceDeniedFailure object SubstratumServiceDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Substratum Service but the app is not permitted to access it. Success object Success : ThemeApp.InitResult Initialization is succeeded. UnknownFailure object UnknownFailure : ThemeApp.InitResult We\u2019re not even sure why you able to go this deep.","title":"Home"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/#initresult","text":"sealed class InitResult This class represents the result of Backend initialization. See Also getInitIntent getResultFromIntent","title":"InitResult"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/#types","text":"Name Summary AndromedaDeniedFailure object AndromedaDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the app is not permitted to access it. AndromedaInactiveFailure object AndromedaInactiveFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the Server is inactive. ArchNotSupportedFailure object ArchNotSupportedFailure : ThemeApp.InitResult Initialization is failed because host architecture is not supported. MagiskDisabledFailure object MagiskDisabledFailure : ThemeApp.InitResult Initialization is failed because the helper magisk module is disabled. NoSupportedBackendFailure object NoSupportedBackendFailure : ThemeApp.InitResult Initialization is failed because no supported Backend is available on the device. RootDeniedFailure object RootDeniedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but root access for the app is denied. RootNotSupportedFailure object RootNotSupportedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but the host root system is not supported. SubstratumServiceDeniedFailure object SubstratumServiceDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Substratum Service but the app is not permitted to access it. Success object Success : ThemeApp.InitResult Initialization is succeeded. UnknownFailure object UnknownFailure : ThemeApp.InitResult We\u2019re not even sure why you able to go this deep.","title":"Types"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/#inheritors","text":"Name Summary AndromedaDeniedFailure object AndromedaDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the app is not permitted to access it. AndromedaInactiveFailure object AndromedaInactiveFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the Server is inactive. ArchNotSupportedFailure object ArchNotSupportedFailure : ThemeApp.InitResult Initialization is failed because host architecture is not supported. MagiskDisabledFailure object MagiskDisabledFailure : ThemeApp.InitResult Initialization is failed because the helper magisk module is disabled. NoSupportedBackendFailure object NoSupportedBackendFailure : ThemeApp.InitResult Initialization is failed because no supported Backend is available on the device. RootDeniedFailure object RootDeniedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but root access for the app is denied. RootNotSupportedFailure object RootNotSupportedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but the host root system is not supported. SubstratumServiceDeniedFailure object SubstratumServiceDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Substratum Service but the app is not permitted to access it. Success object Success : ThemeApp.InitResult Initialization is succeeded. UnknownFailure object UnknownFailure : ThemeApp.InitResult We\u2019re not even sure why you able to go this deep.","title":"Inheritors"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-andromeda-denied-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / AndromedaDeniedFailure AndromedaDeniedFailure \u00b6 object AndromedaDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the app is not permitted to access it.","title":" andromeda denied failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-andromeda-denied-failure/#andromedadeniedfailure","text":"object AndromedaDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the app is not permitted to access it.","title":"AndromedaDeniedFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-andromeda-inactive-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / AndromedaInactiveFailure AndromedaInactiveFailure \u00b6 object AndromedaInactiveFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the Server is inactive.","title":" andromeda inactive failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-andromeda-inactive-failure/#andromedainactivefailure","text":"object AndromedaInactiveFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Andromeda Server but the Server is inactive.","title":"AndromedaInactiveFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-arch-not-supported-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / ArchNotSupportedFailure ArchNotSupportedFailure \u00b6 object ArchNotSupportedFailure : ThemeApp.InitResult Initialization is failed because host architecture is not supported.","title":" arch not supported failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-arch-not-supported-failure/#archnotsupportedfailure","text":"object ArchNotSupportedFailure : ThemeApp.InitResult Initialization is failed because host architecture is not supported.","title":"ArchNotSupportedFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-magisk-disabled-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / MagiskDisabledFailure MagiskDisabledFailure \u00b6 object MagiskDisabledFailure : ThemeApp.InitResult Initialization is failed because the helper magisk module is disabled.","title":" magisk disabled failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-magisk-disabled-failure/#magiskdisabledfailure","text":"object MagiskDisabledFailure : ThemeApp.InitResult Initialization is failed because the helper magisk module is disabled.","title":"MagiskDisabledFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-no-supported-backend-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / NoSupportedBackendFailure NoSupportedBackendFailure \u00b6 object NoSupportedBackendFailure : ThemeApp.InitResult Initialization is failed because no supported Backend is available on the device.","title":" no supported backend failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-no-supported-backend-failure/#nosupportedbackendfailure","text":"object NoSupportedBackendFailure : ThemeApp.InitResult Initialization is failed because no supported Backend is available on the device.","title":"NoSupportedBackendFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-root-denied-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / RootDeniedFailure RootDeniedFailure \u00b6 object RootDeniedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but root access for the app is denied.","title":" root denied failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-root-denied-failure/#rootdeniedfailure","text":"object RootDeniedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but root access for the app is denied.","title":"RootDeniedFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-root-not-supported-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / RootNotSupportedFailure RootNotSupportedFailure \u00b6 object RootNotSupportedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but the host root system is not supported. Any method of root is supported for device with Build.VERSION.SDK_INT < Build.VERSION_CODES.P , otherwise only Magisk root is supported.","title":" root not supported failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-root-not-supported-failure/#rootnotsupportedfailure","text":"object RootNotSupportedFailure : ThemeApp.InitResult Initialization is failed because a root Backend is going to be used but the host root system is not supported. Any method of root is supported for device with Build.VERSION.SDK_INT < Build.VERSION_CODES.P , otherwise only Magisk root is supported.","title":"RootNotSupportedFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-substratum-service-denied-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / SubstratumServiceDeniedFailure SubstratumServiceDeniedFailure \u00b6 object SubstratumServiceDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Substratum Service but the app is not permitted to access it.","title":" substratum service denied failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-substratum-service-denied-failure/#substratumservicedeniedfailure","text":"object SubstratumServiceDeniedFailure : ThemeApp.InitResult Initialization is failed because the active Backend is going to use Substratum Service but the app is not permitted to access it.","title":"SubstratumServiceDeniedFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-success/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / Success Success \u00b6 object Success : ThemeApp.InitResult Initialization is succeeded.","title":" success"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-success/#success","text":"object Success : ThemeApp.InitResult Initialization is succeeded.","title":"Success"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-unknown-failure/","text":"theme / projekt.commons.theme / ThemeApp / InitResult / UnknownFailure UnknownFailure \u00b6 object UnknownFailure : ThemeApp.InitResult We\u2019re not even sure why you able to go this deep.","title":" unknown failure"},{"location":"theme/projekt.commons.theme/-theme-app/-init-result/-unknown-failure/#unknownfailure","text":"object UnknownFailure : ThemeApp.InitResult We\u2019re not even sure why you able to go this deep.","title":"UnknownFailure"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/","text":"theme / projekt.commons.theme / ThemeApp / OverlayState OverlayState \u00b6 object OverlayState Used to represent status of the installed overlay Properties \u00b6 Name Summary STATE_DISABLED val STATE_DISABLED: Int ? Overlay is disabled. STATE_ENABLED val STATE_ENABLED: Int ? Overlay is enabled. STATE_NOT_ACTIVE const val STATE_NOT_ACTIVE: Int Overlay is not active. Usually needs system reboot to make it active.","title":"Home"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/#overlaystate","text":"object OverlayState Used to represent status of the installed overlay","title":"OverlayState"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/#properties","text":"Name Summary STATE_DISABLED val STATE_DISABLED: Int ? Overlay is disabled. STATE_ENABLED val STATE_ENABLED: Int ? Overlay is enabled. STATE_NOT_ACTIVE const val STATE_NOT_ACTIVE: Int Overlay is not active. Usually needs system reboot to make it active.","title":"Properties"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/-s-t-a-t-e_-d-i-s-a-b-l-e-d/","text":"theme / projekt.commons.theme / ThemeApp / OverlayState / STATE_DISABLED STATE_DISABLED \u00b6 val STATE_DISABLED: Int ? Overlay is disabled.","title":" s t a t e  d i s a b l e d"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/-s-t-a-t-e_-d-i-s-a-b-l-e-d/#state_disabled","text":"val STATE_DISABLED: Int ? Overlay is disabled.","title":"STATE_DISABLED"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/-s-t-a-t-e_-e-n-a-b-l-e-d/","text":"theme / projekt.commons.theme / ThemeApp / OverlayState / STATE_ENABLED STATE_ENABLED \u00b6 val STATE_ENABLED: Int ? Overlay is enabled.","title":" s t a t e  e n a b l e d"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/-s-t-a-t-e_-e-n-a-b-l-e-d/#state_enabled","text":"val STATE_ENABLED: Int ? Overlay is enabled.","title":"STATE_ENABLED"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/-s-t-a-t-e_-n-o-t_-a-c-t-i-v-e/","text":"theme / projekt.commons.theme / ThemeApp / OverlayState / STATE_NOT_ACTIVE STATE_NOT_ACTIVE \u00b6 const val STATE_NOT_ACTIVE: Int Overlay is not active. Usually needs system reboot to make it active.","title":" s t a t e  n o t  a c t i v e"},{"location":"theme/projekt.commons.theme/-theme-app/-overlay-state/-s-t-a-t-e_-n-o-t_-a-c-t-i-v-e/#state_not_active","text":"const val STATE_NOT_ACTIVE: Int Overlay is not active. Usually needs system reboot to make it active.","title":"STATE_NOT_ACTIVE"},{"location":"theme/projekt.commons.theme/-theme-app-options/","text":"theme / projekt.commons.theme / ThemeAppOptions ThemeAppOptions \u00b6 class ThemeAppOptions Class to represent the options for theme app configurations. Types \u00b6 Name Summary Builder class Builder Builder class for ThemeAppOptions objects. Companion Object Functions \u00b6 Name Summary build fun build(block: ThemeAppOptions.Builder .() -> Unit ): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"Home"},{"location":"theme/projekt.commons.theme/-theme-app-options/#themeappoptions","text":"class ThemeAppOptions Class to represent the options for theme app configurations.","title":"ThemeAppOptions"},{"location":"theme/projekt.commons.theme/-theme-app-options/#types","text":"Name Summary Builder class Builder Builder class for ThemeAppOptions objects.","title":"Types"},{"location":"theme/projekt.commons.theme/-theme-app-options/#companion-object-functions","text":"Name Summary build fun build(block: ThemeAppOptions.Builder .() -> Unit ): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"Companion Object Functions"},{"location":"theme/projekt.commons.theme/-theme-app-options/build/","text":"theme / projekt.commons.theme / ThemeAppOptions / build build \u00b6 inline fun build(block: ThemeAppOptions.Builder .() -> Unit ): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"Build"},{"location":"theme/projekt.commons.theme/-theme-app-options/build/#build","text":"inline fun build(block: ThemeAppOptions.Builder .() -> Unit ): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"build"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder Builder \u00b6 class Builder Builder class for ThemeAppOptions objects. Constructors \u00b6 Name Summary <init> Builder() Builder class for ThemeAppOptions objects. Properties \u00b6 Name Summary andromedaSamsungSupport var andromedaSamsungSupport: Boolean Whether to support pre-Pie Samsung devices with Andromeda Server installed. andromedaSupport var andromedaSupport: Boolean Whether to support device with Andromeda Server installed. arm64Support var arm64Support: Boolean Whether to support device with arm64-v8a architecture armSupport var armSupport: Boolean Whether to support device with armeabi-v7a architecture pieRootSupport var pieRootSupport: Boolean Whether to support Rooted Pie+ device. rootSupport var rootSupport: Boolean Whether to support Rooted pre-Pie device. substratumServiceSupport var substratumServiceSupport: Boolean Whether to support device that runs Substratum Service. synergySupport var synergySupport: Boolean Whether to support device with Synergy installed. Functions \u00b6 Name Summary build fun build(): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"Home"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/#builder","text":"class Builder Builder class for ThemeAppOptions objects.","title":"Builder"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/#constructors","text":"Name Summary <init> Builder() Builder class for ThemeAppOptions objects.","title":"Constructors"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/#properties","text":"Name Summary andromedaSamsungSupport var andromedaSamsungSupport: Boolean Whether to support pre-Pie Samsung devices with Andromeda Server installed. andromedaSupport var andromedaSupport: Boolean Whether to support device with Andromeda Server installed. arm64Support var arm64Support: Boolean Whether to support device with arm64-v8a architecture armSupport var armSupport: Boolean Whether to support device with armeabi-v7a architecture pieRootSupport var pieRootSupport: Boolean Whether to support Rooted Pie+ device. rootSupport var rootSupport: Boolean Whether to support Rooted pre-Pie device. substratumServiceSupport var substratumServiceSupport: Boolean Whether to support device that runs Substratum Service. synergySupport var synergySupport: Boolean Whether to support device with Synergy installed.","title":"Properties"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/#functions","text":"Name Summary build fun build(): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"Functions"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/-init-/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / <init> <init> \u00b6 Builder() Builder class for ThemeAppOptions objects.","title":" init "},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/-init-/#init","text":"Builder() Builder class for ThemeAppOptions objects.","title":"&lt;init&gt;"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/andromeda-samsung-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / andromedaSamsungSupport andromedaSamsungSupport \u00b6 var andromedaSamsungSupport: Boolean Whether to support pre-Pie Samsung devices with Andromeda Server installed.","title":"Andromeda samsung support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/andromeda-samsung-support/#andromedasamsungsupport","text":"var andromedaSamsungSupport: Boolean Whether to support pre-Pie Samsung devices with Andromeda Server installed.","title":"andromedaSamsungSupport"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/andromeda-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / andromedaSupport andromedaSupport \u00b6 var andromedaSupport: Boolean Whether to support device with Andromeda Server installed.","title":"Andromeda support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/andromeda-support/#andromedasupport","text":"var andromedaSupport: Boolean Whether to support device with Andromeda Server installed.","title":"andromedaSupport"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/arm-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / armSupport armSupport \u00b6 var armSupport: Boolean Whether to support device with armeabi-v7a architecture","title":"Arm support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/arm-support/#armsupport","text":"var armSupport: Boolean Whether to support device with armeabi-v7a architecture","title":"armSupport"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/arm64-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / arm64Support arm64Support \u00b6 var arm64Support: Boolean Whether to support device with arm64-v8a architecture","title":"Arm64 support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/arm64-support/#arm64support","text":"var arm64Support: Boolean Whether to support device with arm64-v8a architecture","title":"arm64Support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/build/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / build build \u00b6 fun build(): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"Build"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/build/#build","text":"fun build(): ThemeAppOptions Combine all of the options that have been set and returns a new ThemeAppOptions object.","title":"build"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/pie-root-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / pieRootSupport pieRootSupport \u00b6 var pieRootSupport: Boolean Whether to support Rooted Pie+ device.","title":"Pie root support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/pie-root-support/#pierootsupport","text":"var pieRootSupport: Boolean Whether to support Rooted Pie+ device.","title":"pieRootSupport"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/root-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / rootSupport rootSupport \u00b6 var rootSupport: Boolean Whether to support Rooted pre-Pie device.","title":"Root support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/root-support/#rootsupport","text":"var rootSupport: Boolean Whether to support Rooted pre-Pie device.","title":"rootSupport"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/substratum-service-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / substratumServiceSupport substratumServiceSupport \u00b6 var substratumServiceSupport: Boolean Whether to support device that runs Substratum Service.","title":"Substratum service support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/substratum-service-support/#substratumservicesupport","text":"var substratumServiceSupport: Boolean Whether to support device that runs Substratum Service.","title":"substratumServiceSupport"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/synergy-support/","text":"theme / projekt.commons.theme / ThemeAppOptions / Builder / synergySupport synergySupport \u00b6 var synergySupport: Boolean Whether to support device with Synergy installed.","title":"Synergy support"},{"location":"theme/projekt.commons.theme/-theme-app-options/-builder/synergy-support/#synergysupport","text":"var synergySupport: Boolean Whether to support device with Synergy installed.","title":"synergySupport"},{"location":"theme/projekt.commons.theme/-theme-application/","text":"theme / projekt.commons.theme / ThemeApplication ThemeApplication \u00b6 open class ThemeApplication : Application Base Application class for theme app. Constructors \u00b6 Name Summary <init> ThemeApplication() Base Application class for theme app.","title":"Home"},{"location":"theme/projekt.commons.theme/-theme-application/#themeapplication","text":"open class ThemeApplication : Application Base Application class for theme app.","title":"ThemeApplication"},{"location":"theme/projekt.commons.theme/-theme-application/#constructors","text":"Name Summary <init> ThemeApplication() Base Application class for theme app.","title":"Constructors"},{"location":"theme/projekt.commons.theme/-theme-application/-init-/","text":"theme / projekt.commons.theme / ThemeApplication / <init> <init> \u00b6 ThemeApplication() Base Application class for theme app.","title":" init "},{"location":"theme/projekt.commons.theme/-theme-application/-init-/#init","text":"ThemeApplication() Base Application class for theme app.","title":"&lt;init&gt;"},{"location":"theme/projekt.commons.theme.backend/","text":"theme / projekt.commons.theme.backend Package projekt.commons.theme.backend \u00b6 Types \u00b6 Name Summary Backend interface Backend Interface to do overlay related operations. Functions \u00b6 Name Summary isOverlayNewest fun Backend .isOverlayNewest(name: String , timeStamp: Long ): Boolean Checks whether the installed overlay is the intended ones. This is checked against timestamp in the overlay metadata. setPriority fun Backend .setPriority(overlays: List < String >): Unit Sets priority of overlays. switchOverlay fun Backend .switchOverlay(overlay: String , state: Boolean ): Unit fun Backend .switchOverlay(overlays: List < String >, state: Boolean ): Unit Switches overlay state. uninstallOverlay fun Backend .uninstallOverlay(overlays: List < String >): Unit Uninstalls overlay from the system.","title":"Home"},{"location":"theme/projekt.commons.theme.backend/#package-projektcommonsthemebackend","text":"","title":"Package projekt.commons.theme.backend"},{"location":"theme/projekt.commons.theme.backend/#types","text":"Name Summary Backend interface Backend Interface to do overlay related operations.","title":"Types"},{"location":"theme/projekt.commons.theme.backend/#functions","text":"Name Summary isOverlayNewest fun Backend .isOverlayNewest(name: String , timeStamp: Long ): Boolean Checks whether the installed overlay is the intended ones. This is checked against timestamp in the overlay metadata. setPriority fun Backend .setPriority(overlays: List < String >): Unit Sets priority of overlays. switchOverlay fun Backend .switchOverlay(overlay: String , state: Boolean ): Unit fun Backend .switchOverlay(overlays: List < String >, state: Boolean ): Unit Switches overlay state. uninstallOverlay fun Backend .uninstallOverlay(overlays: List < String >): Unit Uninstalls overlay from the system.","title":"Functions"},{"location":"theme/projekt.commons.theme.backend/is-overlay-newest/","text":"theme / projekt.commons.theme.backend / isOverlayNewest isOverlayNewest \u00b6 fun Backend .isOverlayNewest(name: String , timeStamp: Long ): Boolean Checks whether the installed overlay is the intended ones. This is checked against timestamp in the overlay metadata. Parameters \u00b6 name - Package name of the overlay. timeStamp - Timestamp of the intended overlay.","title":"Is overlay newest"},{"location":"theme/projekt.commons.theme.backend/is-overlay-newest/#isoverlaynewest","text":"fun Backend .isOverlayNewest(name: String , timeStamp: Long ): Boolean Checks whether the installed overlay is the intended ones. This is checked against timestamp in the overlay metadata.","title":"isOverlayNewest"},{"location":"theme/projekt.commons.theme.backend/is-overlay-newest/#parameters","text":"name - Package name of the overlay. timeStamp - Timestamp of the intended overlay.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/set-priority/","text":"theme / projekt.commons.theme.backend / setPriority setPriority \u00b6 fun Backend .setPriority(overlays: List < String >): Unit Sets priority of overlays. Parameters \u00b6 overlays - List of overlays to be set. In sequence, the priority will be lower to higher.","title":"Set priority"},{"location":"theme/projekt.commons.theme.backend/set-priority/#setpriority","text":"fun Backend .setPriority(overlays: List < String >): Unit Sets priority of overlays.","title":"setPriority"},{"location":"theme/projekt.commons.theme.backend/set-priority/#parameters","text":"overlays - List of overlays to be set. In sequence, the priority will be lower to higher.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/switch-overlay/","text":"theme / projekt.commons.theme.backend / switchOverlay switchOverlay \u00b6 fun Backend .switchOverlay(overlay: String , state: Boolean ): Unit Switches overlay state. Parameters \u00b6 overlay - Overlay package name to be switched. state - true to state, false otherwise. is done. fun Backend .switchOverlay(overlays: List < String >, state: Boolean ): Unit Switches overlay state. Parameters \u00b6 overlays - List of overlay package names to be switched. state - true to enable, false otherwise.","title":"Switch overlay"},{"location":"theme/projekt.commons.theme.backend/switch-overlay/#switchoverlay","text":"fun Backend .switchOverlay(overlay: String , state: Boolean ): Unit Switches overlay state.","title":"switchOverlay"},{"location":"theme/projekt.commons.theme.backend/switch-overlay/#parameters","text":"overlay - Overlay package name to be switched. state - true to state, false otherwise. is done. fun Backend .switchOverlay(overlays: List < String >, state: Boolean ): Unit Switches overlay state.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/switch-overlay/#parameters_1","text":"overlays - List of overlay package names to be switched. state - true to enable, false otherwise.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/uninstall-overlay/","text":"theme / projekt.commons.theme.backend / uninstallOverlay uninstallOverlay \u00b6 fun Backend .uninstallOverlay(overlays: List < String >): Unit Uninstalls overlay from the system. Parameters \u00b6 overlays - List of overlay package names to be uninstalled.","title":"Uninstall overlay"},{"location":"theme/projekt.commons.theme.backend/uninstall-overlay/#uninstalloverlay","text":"fun Backend .uninstallOverlay(overlays: List < String >): Unit Uninstalls overlay from the system.","title":"uninstallOverlay"},{"location":"theme/projekt.commons.theme.backend/uninstall-overlay/#parameters","text":"overlays - List of overlay package names to be uninstalled.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/","text":"theme / projekt.commons.theme.backend / Backend Backend \u00b6 interface Backend Interface to do overlay related operations. See Also getBackend Properties \u00b6 Name Summary overlayState abstract val overlayState: Map < String , Int > Returns map of installed overlay package name and its state. targetWithMultipleOverlay abstract val targetWithMultipleOverlay: List < String > Returns list of target packages that overlaid by multiple overlays. Functions \u00b6 Name Summary applyFonts abstract fun applyFonts(themePid: String , name: String ): Unit Applies custom fonts to the system. getEnabledOverlayWithTarget abstract fun getEnabledOverlayWithTarget(targetPackage: String ): List < String > Returns list of enabled overlay package names for a target. installOverlay abstract fun installOverlay(paths: List < String >): Unit Installs overlay to the system. restartSystemUi abstract fun restartSystemUi(): Unit Restarts SystemUI restoreFonts abstract fun restoreFonts(): Unit Restores fonts to system default. setPriority abstract fun setPriority(packages: List < String >, restartUi: Boolean ): Unit Sets priority of overlays. switchOverlay abstract fun switchOverlay(packages: List < String >, state: Boolean , restartUi: Boolean ): Unit Switches overlay state. uninstallOverlay abstract fun uninstallOverlay(packages: List < String >, restartUi: Boolean ): Unit Uninstalls overlay from the system. Extension Functions \u00b6 Name Summary isOverlayNewest fun Backend .isOverlayNewest(name: String , timeStamp: Long ): Boolean Checks whether the installed overlay is the intended ones. This is checked against timestamp in the overlay metadata. setPriority fun Backend .setPriority(overlays: List < String >): Unit Sets priority of overlays. switchOverlay fun Backend .switchOverlay(overlay: String , state: Boolean ): Unit fun Backend .switchOverlay(overlays: List < String >, state: Boolean ): Unit Switches overlay state. uninstallOverlay fun Backend .uninstallOverlay(overlays: List < String >): Unit Uninstalls overlay from the system.","title":"Home"},{"location":"theme/projekt.commons.theme.backend/-backend/#backend","text":"interface Backend Interface to do overlay related operations. See Also getBackend","title":"Backend"},{"location":"theme/projekt.commons.theme.backend/-backend/#properties","text":"Name Summary overlayState abstract val overlayState: Map < String , Int > Returns map of installed overlay package name and its state. targetWithMultipleOverlay abstract val targetWithMultipleOverlay: List < String > Returns list of target packages that overlaid by multiple overlays.","title":"Properties"},{"location":"theme/projekt.commons.theme.backend/-backend/#functions","text":"Name Summary applyFonts abstract fun applyFonts(themePid: String , name: String ): Unit Applies custom fonts to the system. getEnabledOverlayWithTarget abstract fun getEnabledOverlayWithTarget(targetPackage: String ): List < String > Returns list of enabled overlay package names for a target. installOverlay abstract fun installOverlay(paths: List < String >): Unit Installs overlay to the system. restartSystemUi abstract fun restartSystemUi(): Unit Restarts SystemUI restoreFonts abstract fun restoreFonts(): Unit Restores fonts to system default. setPriority abstract fun setPriority(packages: List < String >, restartUi: Boolean ): Unit Sets priority of overlays. switchOverlay abstract fun switchOverlay(packages: List < String >, state: Boolean , restartUi: Boolean ): Unit Switches overlay state. uninstallOverlay abstract fun uninstallOverlay(packages: List < String >, restartUi: Boolean ): Unit Uninstalls overlay from the system.","title":"Functions"},{"location":"theme/projekt.commons.theme.backend/-backend/#extension-functions","text":"Name Summary isOverlayNewest fun Backend .isOverlayNewest(name: String , timeStamp: Long ): Boolean Checks whether the installed overlay is the intended ones. This is checked against timestamp in the overlay metadata. setPriority fun Backend .setPriority(overlays: List < String >): Unit Sets priority of overlays. switchOverlay fun Backend .switchOverlay(overlay: String , state: Boolean ): Unit fun Backend .switchOverlay(overlays: List < String >, state: Boolean ): Unit Switches overlay state. uninstallOverlay fun Backend .uninstallOverlay(overlays: List < String >): Unit Uninstalls overlay from the system.","title":"Extension Functions"},{"location":"theme/projekt.commons.theme.backend/-backend/apply-fonts/","text":"theme / projekt.commons.theme.backend / Backend / applyFonts applyFonts \u00b6 abstract fun applyFonts(themePid: String , name: String ): Unit Applies custom fonts to the system. Parameters \u00b6 themePid - Theme package name. name - fonts package name inside the theme. Exceptions \u00b6 RemoteException -","title":"Apply fonts"},{"location":"theme/projekt.commons.theme.backend/-backend/apply-fonts/#applyfonts","text":"abstract fun applyFonts(themePid: String , name: String ): Unit Applies custom fonts to the system.","title":"applyFonts"},{"location":"theme/projekt.commons.theme.backend/-backend/apply-fonts/#parameters","text":"themePid - Theme package name. name - fonts package name inside the theme.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/apply-fonts/#exceptions","text":"RemoteException -","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/get-enabled-overlay-with-target/","text":"theme / projekt.commons.theme.backend / Backend / getEnabledOverlayWithTarget getEnabledOverlayWithTarget \u00b6 abstract fun getEnabledOverlayWithTarget(targetPackage: String ): List < String > Returns list of enabled overlay package names for a target. Parameters \u00b6 targetPackage - Target package of the overlay. Exceptions \u00b6 RemoteException - Return Will never be null","title":"Get enabled overlay with target"},{"location":"theme/projekt.commons.theme.backend/-backend/get-enabled-overlay-with-target/#getenabledoverlaywithtarget","text":"abstract fun getEnabledOverlayWithTarget(targetPackage: String ): List < String > Returns list of enabled overlay package names for a target.","title":"getEnabledOverlayWithTarget"},{"location":"theme/projekt.commons.theme.backend/-backend/get-enabled-overlay-with-target/#parameters","text":"targetPackage - Target package of the overlay.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/get-enabled-overlay-with-target/#exceptions","text":"RemoteException - Return Will never be null","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/install-overlay/","text":"theme / projekt.commons.theme.backend / Backend / installOverlay installOverlay \u00b6 abstract fun installOverlay(paths: List < String >): Unit Installs overlay to the system. Parameters \u00b6 paths - List of overlay package paths to be installed. Exceptions \u00b6 RemoteException -","title":"Install overlay"},{"location":"theme/projekt.commons.theme.backend/-backend/install-overlay/#installoverlay","text":"abstract fun installOverlay(paths: List < String >): Unit Installs overlay to the system.","title":"installOverlay"},{"location":"theme/projekt.commons.theme.backend/-backend/install-overlay/#parameters","text":"paths - List of overlay package paths to be installed.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/install-overlay/#exceptions","text":"RemoteException -","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/overlay-state/","text":"theme / projekt.commons.theme.backend / Backend / overlayState overlayState \u00b6 abstract val overlayState: Map < String , Int > Returns map of installed overlay package name and its state. See Also OverlayState","title":"Overlay state"},{"location":"theme/projekt.commons.theme.backend/-backend/overlay-state/#overlaystate","text":"abstract val overlayState: Map < String , Int > Returns map of installed overlay package name and its state. See Also OverlayState","title":"overlayState"},{"location":"theme/projekt.commons.theme.backend/-backend/restart-system-ui/","text":"theme / projekt.commons.theme.backend / Backend / restartSystemUi restartSystemUi \u00b6 abstract fun restartSystemUi(): Unit Restarts SystemUI Exceptions \u00b6 RemoteException -","title":"Restart system ui"},{"location":"theme/projekt.commons.theme.backend/-backend/restart-system-ui/#restartsystemui","text":"abstract fun restartSystemUi(): Unit Restarts SystemUI","title":"restartSystemUi"},{"location":"theme/projekt.commons.theme.backend/-backend/restart-system-ui/#exceptions","text":"RemoteException -","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/restore-fonts/","text":"theme / projekt.commons.theme.backend / Backend / restoreFonts restoreFonts \u00b6 abstract fun restoreFonts(): Unit Restores fonts to system default. Exceptions \u00b6 RemoteException -","title":"Restore fonts"},{"location":"theme/projekt.commons.theme.backend/-backend/restore-fonts/#restorefonts","text":"abstract fun restoreFonts(): Unit Restores fonts to system default.","title":"restoreFonts"},{"location":"theme/projekt.commons.theme.backend/-backend/restore-fonts/#exceptions","text":"RemoteException -","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/set-priority/","text":"theme / projekt.commons.theme.backend / Backend / setPriority setPriority \u00b6 abstract fun setPriority(packages: List < String >, restartUi: Boolean ): Unit Sets priority of overlays. Parameters \u00b6 packages - List of overlays to be set. In sequence, the priority will be lower to higher. restartUi - Whether to restert SystemUI after operation is done. Exceptions \u00b6 RemoteException -","title":"Set priority"},{"location":"theme/projekt.commons.theme.backend/-backend/set-priority/#setpriority","text":"abstract fun setPriority(packages: List < String >, restartUi: Boolean ): Unit Sets priority of overlays.","title":"setPriority"},{"location":"theme/projekt.commons.theme.backend/-backend/set-priority/#parameters","text":"packages - List of overlays to be set. In sequence, the priority will be lower to higher. restartUi - Whether to restert SystemUI after operation is done.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/set-priority/#exceptions","text":"RemoteException -","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/switch-overlay/","text":"theme / projekt.commons.theme.backend / Backend / switchOverlay switchOverlay \u00b6 abstract fun switchOverlay(packages: List < String >, state: Boolean , restartUi: Boolean ): Unit Switches overlay state. Parameters \u00b6 packages - List of overlay package names to be switched. state - true to enable, false otherwise. restartUi - Whether to restert SystemUI after operation is done. Exceptions \u00b6 RemoteException -","title":"Switch overlay"},{"location":"theme/projekt.commons.theme.backend/-backend/switch-overlay/#switchoverlay","text":"abstract fun switchOverlay(packages: List < String >, state: Boolean , restartUi: Boolean ): Unit Switches overlay state.","title":"switchOverlay"},{"location":"theme/projekt.commons.theme.backend/-backend/switch-overlay/#parameters","text":"packages - List of overlay package names to be switched. state - true to enable, false otherwise. restartUi - Whether to restert SystemUI after operation is done.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/switch-overlay/#exceptions","text":"RemoteException -","title":"Exceptions"},{"location":"theme/projekt.commons.theme.backend/-backend/target-with-multiple-overlay/","text":"theme / projekt.commons.theme.backend / Backend / targetWithMultipleOverlay targetWithMultipleOverlay \u00b6 abstract val targetWithMultipleOverlay: List < String > Returns list of target packages that overlaid by multiple overlays.","title":"Target with multiple overlay"},{"location":"theme/projekt.commons.theme.backend/-backend/target-with-multiple-overlay/#targetwithmultipleoverlay","text":"abstract val targetWithMultipleOverlay: List < String > Returns list of target packages that overlaid by multiple overlays.","title":"targetWithMultipleOverlay"},{"location":"theme/projekt.commons.theme.backend/-backend/uninstall-overlay/","text":"theme / projekt.commons.theme.backend / Backend / uninstallOverlay uninstallOverlay \u00b6 abstract fun uninstallOverlay(packages: List < String >, restartUi: Boolean ): Unit Uninstalls overlay from the system. Parameters \u00b6 packages - List of overlay package names to be uninstalled. restartUi - Whether to restert SystemUI after operation is done. Exceptions \u00b6 RemoteException -","title":"Uninstall overlay"},{"location":"theme/projekt.commons.theme.backend/-backend/uninstall-overlay/#uninstalloverlay","text":"abstract fun uninstallOverlay(packages: List < String >, restartUi: Boolean ): Unit Uninstalls overlay from the system.","title":"uninstallOverlay"},{"location":"theme/projekt.commons.theme.backend/-backend/uninstall-overlay/#parameters","text":"packages - List of overlay package names to be uninstalled. restartUi - Whether to restert SystemUI after operation is done.","title":"Parameters"},{"location":"theme/projekt.commons.theme.backend/-backend/uninstall-overlay/#exceptions","text":"RemoteException -","title":"Exceptions"}]}